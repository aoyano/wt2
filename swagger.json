{
  "swagger": "2.0",
  "info": {
    "description": "This is a REST API documentation to Sneakshop Store. You can find out more about this web application.",
    "version": "1.0.0",
    "title": "SneakShop REST API Documentation",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "zhasulanov04@list.ru"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "tags": [
    {
      "name": "Product",
      "description": "API for product page in the system"
    },
    {
      "name": "Auth",
      "description": "API for authorization & authentication in the system"
    },
    {
      "name": "User",
      "description": "API for authorized user to control his/her data in the system"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": ["Product"],
        "summary": "Get all products in system",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Get all product in system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      }
    },
    "/auth/": {
      "post": {
        "tags": ["Auth"],
        "summary": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },"/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/addUser": {
      "post": {
        "tags": ["Users"],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "delete": {
      "summary": "Delete user with given ID",
      "tags": ["Users"],
      "responses": {
        "200": {
          "description": "User is deleted",
          "schema": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },"/user/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "integer"
        }
      ],
      "put": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/updateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "updateUser": {
      "required": ["name", "companies"],
      "properties": {
        "isPublic": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "books": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "amount": {
                "type": "number"
              }
            }
          }
        },
        "companies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "objectId"
        },
        "userId": {
          "type": "string",
          "format": "objectId"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "objectId"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "googleId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "ObjectId"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        },
        "productImg": {
          "type": "string",
          "format": "path"
        }
      },
      "xml": {
        "name": "Product"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}